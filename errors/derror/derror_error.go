package derror

import (
	"bytes"
	"donkeygo/internal/utils"
	"errors"
	"fmt"
	"io"
	"runtime"
	"strings"
)

type Error struct {
	error error  // error的包装器
	text  string // Error text
	code  int    // Error code
	stack stack  // 栈堆数组
}

const (
	// Filtering key for current error module paths.
	stackFilterKeyLocal = "/errors/derror/derror"
)

var (
	// goRootForFilter is used for stack filtering purpose.
	// Mainly for development environment.
	goRootForFilter = runtime.GOROOT()
)

func init() {
	if goRootForFilter != "" {
		goRootForFilter = strings.Replace(goRootForFilter, "\\", "/", -1)
	}
}

func (that *Error) Error() string {
	if that == nil {
		return ""
	}
	errStr := that.text
	if that.error != nil {
		if that.text != "" {
			errStr += ": "
		}
		errStr += that.error.Error()
	}
	return errStr
}

func (that *Error) Code() int {
	if that == nil {
		return -1
	}
	return that.code
}

func (that *Error) Cause() error {
	if that == nil {
		return nil
	}
	loop := that
	for loop != nil {
		if loop.error != nil {
			if e, ok := loop.error.(*Error); ok {
				// Internal Error struct.
				loop = e
			} else if e, ok := loop.error.(apiCause); ok {
				// Other Error that implements ApiCause interface.
				return e.Cause()
			} else {
				return loop.error
			}
		} else {
			// return loop
			// To be compatible with Case of https://github.com/pkg/errors.
			return errors.New(loop.text)
		}
	}
	return nil
}

// Format formats the frame according to the fmt.Formatter interface.
//
// %v, %s   : Print all the error string;
// %-v, %-s : Print current level error string;
// %+s      : Print full stack error list;
// %+v      : Print the error string and full stack error list;
func (that *Error) Format(s fmt.State, verb rune) {
	switch verb {
	case 's', 'v':
		switch {
		case s.Flag('-'):
			if that.text != "" {
				_, _ = io.WriteString(s, that.text)
			} else {
				_, _ = io.WriteString(s, that.Error())
			}
		case s.Flag('+'):
			if verb == 's' {
				_, _ = io.WriteString(s, that.Stack())
			} else {
				_, _ = io.WriteString(s, that.Error()+"\n"+that.Stack())
			}
		default:
			_, _ = io.WriteString(s, that.Error())
		}
	}
}

// Stack returns the stack callers as string.
// It returns an empty string if the <err> does not support stacks.
func (that *Error) Stack() string {
	if that == nil {
		return ""
	}
	var (
		loop   = that
		index  = 1
		buffer = bytes.NewBuffer(nil)
	)
	for loop != nil {
		buffer.WriteString(fmt.Sprintf("%d. %-v\n", index, loop))
		index++
		formatSubStack(loop.stack, buffer)
		if loop.error != nil {
			if e, ok := loop.error.(*Error); ok {
				loop = e
			} else {
				buffer.WriteString(fmt.Sprintf("%d. %s\n", index, loop.error.Error()))
				index++
				break
			}
		} else {
			break
		}
	}
	return buffer.String()
}

func (that *Error) Current() error {
	if that == nil {
		return nil
	}
	return &Error{
		error: nil,
		stack: that.stack,
		text:  that.text,
	}
}

func (that *Error) Next() error {
	if that == nil {
		return nil
	}
	return that.error
}

func (that *Error) MarshalJSON() ([]byte, error) {
	return []byte(`"` + that.Error() + `"`), nil
}

// formatSubStack formats the stack for error.
func formatSubStack(st stack, buffer *bytes.Buffer) {
	index := 1
	space := "  "
	for _, p := range st {
		if fn := runtime.FuncForPC(p - 1); fn != nil {
			file, line := fn.FileLine(p - 1)
			// Custom filtering.
			if !utils.IsDebugEnabled() {
				if strings.Contains(file, utils.StackFilterKeyForGoFrame) {
					continue
				}
			} else {
				if strings.Contains(file, stackFilterKeyLocal) {
					continue
				}
			}
			// Avoid stack string like "<autogenerated>"
			if strings.Contains(file, "<") {
				continue
			}
			// Ignore GO ROOT paths.
			if goRootForFilter != "" &&
				len(file) >= len(goRootForFilter) &&
				file[0:len(goRootForFilter)] == goRootForFilter {
				continue
			}
			// Graceful indent.
			if index > 9 {
				space = " "
			}
			buffer.WriteString(fmt.Sprintf(
				"   %d).%s%s\n    \t%s:%d\n",
				index, space, fn.Name(), file, line,
			))
			index++
		}
	}
}
